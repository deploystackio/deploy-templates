name: Helm Chart Publish

on:
  push:
    branches:
      - main
    paths:
      - '**/helm/**'

permissions:
  contents: write

jobs:
  package-and-publish:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for deleted Helm directories
        id: check-deleted
        run: |
          DELETED_FILES=$(git diff --name-status HEAD^ HEAD | grep '^D' | awk '{print $2}' || echo "")
          if echo "$DELETED_FILES" | grep -q "/helm/"; then
            echo "SKIP_WORKFLOW=true" >> $GITHUB_ENV
          else
            echo "SKIP_WORKFLOW=false" >> $GITHUB_ENV
          fi

      - name: Set up Helm
        if: env.SKIP_WORKFLOW != 'true'
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Process Helm charts
        if: env.SKIP_WORKFLOW != 'true'
        run: |
          # Find changed files in this commit
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep "helm/" || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "HELM_EXISTS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Extract unique chart directories from changed files
          declare -A CHART_DIRS
          
          for FILE in $CHANGED_FILES; do
            APP_NAME=$(echo $FILE | cut -d'/' -f1)
            HELM_DIR="${APP_NAME}/helm"
            
            if [ -f "${HELM_DIR}/Chart.yaml" ]; then
              CHART_DIRS["$HELM_DIR"]=1
            fi
          done
          
          if [ ${#CHART_DIRS[@]} -eq 0 ]; then
            echo "HELM_EXISTS=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Create directory for packaged charts
          mkdir -p .charts
          
          # Configure git for possible commits
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # For version increments create a separate branch
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="helm-version-updates-$TIMESTAMP"
          NEED_VERSION_BRANCH=false
          
          # Process each chart
          for CHART_DIR in "${!CHART_DIRS[@]}"; do
            echo "Processing chart in $CHART_DIR"
            
            # Get current version
            CURRENT_VERSION=$(grep "version:" $CHART_DIR/Chart.yaml | awk '{print $2}')
            echo "Current version: $CURRENT_VERSION"
            
            # Get chart name
            CHART_NAME=$(grep "name:" $CHART_DIR/Chart.yaml | awk '{print $2}')
            
            # Check if this is a new commit that hasn't been deployed yet
            NEEDS_INCREMENT=false
            
            # Pull gh-pages branch to check current versions
            mkdir -p temp_ghpages
            git fetch origin gh-pages:gh-pages || true
            if git show gh-pages:index.yaml > temp_ghpages/index.yaml 2>/dev/null; then
              if grep -q "name: $CHART_NAME" temp_ghpages/index.yaml; then
                if grep -q "version: $CURRENT_VERSION" temp_ghpages/index.yaml; then
                  echo "Chart $CHART_NAME with version $CURRENT_VERSION already exists in index"
                  echo "Will increment patch version"
                  NEEDS_INCREMENT=true
                else
                  echo "Chart version has already been changed in source, not incrementing"
                fi
              else
                echo "Chart $CHART_NAME not found in index, using current version"
              fi
            else
              echo "No index.yaml found on gh-pages branch, using current version"
            fi
            
            # Increment version if needed - create branch only once if needed
            if [ "$NEEDS_INCREMENT" = "true" ]; then
              if [ "$NEED_VERSION_BRANCH" = "false" ]; then
                NEED_VERSION_BRANCH=true
                git checkout -b $BRANCH_NAME
              fi
              
              # Split version into parts
              MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
              MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
              PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
              
              # Increment patch version
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              
              echo "Incrementing version from $CURRENT_VERSION to $NEW_VERSION"
              
              # Update Chart.yaml with new version
              sed -i "s/version: $CURRENT_VERSION/version: $NEW_VERSION/" $CHART_DIR/Chart.yaml
              
              # Stage the changes
              git add $CHART_DIR/Chart.yaml
            fi
            
            # Always package the chart with current version 
            helm package $CHART_DIR -d .charts/
            echo "Packaged chart in $CHART_DIR"
          done
          
          # If we created a version branch, commit and push it
          if [ "$NEED_VERSION_BRANCH" = "true" ]; then
            git commit -m "Automatically increment Helm chart versions [skip ci]"
            
            # Try to push the branch, with retry logic
            MAX_RETRIES=5
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin $BRANCH_NAME; then
                echo "Successfully pushed branch $BRANCH_NAME"
                
                # Here you would create a PR
                # If using GitHub CLI:
                # gh pr create --title "Update Helm chart versions" \
                #           --body "Automatically incrementing chart versions" \
                #           --base main \
                #           --head $BRANCH_NAME
                
                # If you don't have GitHub CLI, you can use the GitHub API:
                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/deploystackio/deploy-templates/pulls \
                  -d "{\"title\":\"Update Helm chart versions\",\"body\":\"Automatically incrementing chart versions\",\"head\":\"$BRANCH_NAME\",\"base\":\"main\"}"
                
                break
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, retrying in 10 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                  sleep 10
                else
                  echo "Failed to push after $MAX_RETRIES attempts"
                  # Continue with chart publishing using current versions
                fi
              fi
            done
            
            # Go back to main branch to continue with publishing
            git checkout main
          fi
          
          if [ -z "$(ls -A .charts/ 2>/dev/null)" ]; then
            echo "HELM_EXISTS=false" >> $GITHUB_ENV
          else
            echo "HELM_EXISTS=true" >> $GITHUB_ENV
          fi

      - name: Checkout gh-pages branch
        if: env.SKIP_WORKFLOW != 'true' && env.HELM_EXISTS == 'true'
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm repository
        if: env.SKIP_WORKFLOW != 'true' && env.HELM_EXISTS == 'true'
        run: |
          cd gh-pages
          
          # Create charts directory if it doesn't exist
          mkdir -p charts
          
          # Copy packaged charts
          cp ../.charts/*.tgz charts/
          
          # If no index.yaml, create it
          if [ ! -f "index.yaml" ]; then
            helm repo index . --url https://deploystackio.github.io/deploy-templates/charts
          else
            # Update existing index
            helm repo index . --url https://deploystackio.github.io/deploy-templates/charts --merge index.yaml
          fi
          
          # Add timestamp comment
          echo "# Charts updated from main branch on $(date)" >> index.yaml
          
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Add changes
          git add index.yaml
          git add charts/*.tgz
          
          # Commit and push with retry logic
          if ! git diff --staged --quiet; then
            git commit -m "Update Helm repository"
            
            MAX_RETRIES=5
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              # Pull with rebase first to get latest changes
              git pull --rebase origin gh-pages
              
              if git push origin gh-pages; then
                echo "Successfully pushed to gh-pages"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "Push failed, retrying in 15 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
                  sleep 15
                else
                  echo "Failed to push after $MAX_RETRIES attempts"
                  exit 1
                fi
              fi
            done
          else
            echo "No changes to commit"
          fi
